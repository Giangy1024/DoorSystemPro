WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:14.080
[音乐]

00:00:14.080 --> 00:00:18.160
我们刚才在这里添加了这个栏，

00:00:18.160 --> 00:00:19.880
我们从酒吧复制而来，

00:00:19.880 --> 00:00:21.720
我们按下 Alt 并拖动它，

00:00:21.720 --> 00:00:23.480
我们把它带到这里。

00:00:23.480 --> 00:00:26.520
我们还创建了对它的引用，

00:00:26.520 --> 00:00:28.440
我们的水平蓝图。

00:00:28.440 --> 00:00:32.360
现在，让我们开始对这扇门做点什么。

00:00:32.360 --> 00:00:34.440
我说的做某事，是指

00:00:34.440 --> 00:00:39.120
基本上就是旋转它来打开它。

00:00:39.120 --> 00:00:43.280
我的做法是，选择门，按 E，

00:00:43.280 --> 00:00:44.480
我们可以看到，

00:00:44.480 --> 00:00:46.120
它变成了旋转器。

00:00:46.120 --> 00:00:50.040
按下 R 键，它会改变比例。

00:00:50.040 --> 00:00:55.080
Ismo，W 带来移动钥匙。

00:00:55.080 --> 00:00:58.760
我们还可以在这里看到选择。

00:00:58.760 --> 00:01:01.680
我们需要做的是，

00:01:01.680 --> 00:01:04.200
移动这扇门，基本上就是旋转它，

00:01:04.200 --> 00:01:07.600
这是一个静态网格演员。

00:01:07.600 --> 00:01:09.920
演员是关键词。

00:01:09.920 --> 00:01:13.680
为什么会这样？因为正如我们在蓝图中所说的那样，

00:01:13.680 --> 00:01:16.320
有一些预先编写的行为。

00:01:16.320 --> 00:01:19.080
我从这里拉出一根电缆，

00:01:19.080 --> 00:01:21.400
从我们对门的参考来看，

00:01:21.400 --> 00:01:25.080
并询问演员。

00:01:25.080 --> 00:01:27.200
我们想要改变的是轮换。

00:01:27.200 --> 00:01:29.480
所以轮换。

00:01:29.480 --> 00:01:34.440
您可以看到我们获得了一些有关旋转的选项。

00:01:34.440 --> 00:01:35.760
我们有演员轮换，

00:01:35.760 --> 00:01:37.480
我们可以设置演员的旋转。

00:01:37.480 --> 00:01:40.760
我们可以设置相对位置和旋转。

00:01:40.760 --> 00:01:43.760
我们将讨论相对和差异

00:01:43.760 --> 00:01:47.160
后面的课程中还会讲到相对和世界之间的关系。

00:01:47.160 --> 00:01:49.280
但现在我们只使用

00:01:49.280 --> 00:01:51.640
演员轮换，

00:01:51.640 --> 00:01:54.080
这是一个世界自转。

00:01:54.080 --> 00:01:57.400
我将选择这个设置演员旋转的节点。

00:01:57.400 --> 00:02:00.960
现在，该节点有一个执行。

00:02:00.960 --> 00:02:05.400
对于输出，返回值为红色。

00:02:05.400 --> 00:02:08.680
红色是布尔值，我们稍后会讨论它。

00:02:08.680 --> 00:02:10.880
旋转输入，

00:02:10.880 --> 00:02:12.960
以及传送物​​理布尔值。

00:02:12.960 --> 00:02:16.120
您可以看到事物都是用颜色编码的。

00:02:16.120 --> 00:02:19.440
这给我们带来了一个新话题。

00:02:19.440 --> 00:02:20.880
什么是变量？

00:02:20.880 --> 00:02:26.880
变量就像信息的小空白单元。

00:02:26.880 --> 00:02:30.840
变量类型是什么类型的信息？

00:02:30.840 --> 00:02:34.320
我们没有解释我的蓝图。

00:02:34.320 --> 00:02:36.640
那么 My Blueprint 托管什么？

00:02:36.640 --> 00:02:40.440
我的蓝图包含有关我们的代码的信息。

00:02:40.440 --> 00:02:42.560
正如你所见，它向你展示了

00:02:42.560 --> 00:02:45.640
属于蓝图的变量、图表等

00:02:45.640 --> 00:02:47.480
这里我们有类别图。

00:02:47.480 --> 00:02:50.360
如果我们去测试，

00:02:50.360 --> 00:02:54.920
看看图表，你会看到已经有一些事件，

00:02:54.920 --> 00:02:57.080
这个布局事件。

00:02:57.080 --> 00:02:59.320
如果我双击这个，

00:02:59.320 --> 00:03:01.680
我可以被带领参加每一个活动。

00:03:01.680 --> 00:03:03.600
因此我们的图表中存在一个事件，

00:03:03.600 --> 00:03:06.640
我们可以从这里直接导航到它。

00:03:06.640 --> 00:03:09.480
我们还可以创建新的图表。

00:03:09.480 --> 00:03:11.640
例如，这将是

00:03:11.640 --> 00:03:14.760
射击图或运动图，

00:03:14.760 --> 00:03:17.480
或我们想要的任何其他图表。

00:03:17.480 --> 00:03:21.320
所以我们可以针对不同的事件绘制不同的图表，

00:03:21.320 --> 00:03:25.280
但我不能有相同的图表事件。

00:03:25.280 --> 00:03:30.520
右键单击并调出 BeginPlay 事件。

00:03:30.520 --> 00:03:34.360
我可以把它带到这里，也可以在这里拥有它。

00:03:34.360 --> 00:03:36.320
但它不起作用。

00:03:36.320 --> 00:03:40.680
我从这里拖动并输入打印字符串，

00:03:40.680 --> 00:03:44.280
这是一个仅打印字符串的节点。

00:03:44.280 --> 00:03:48.360
将其连接到这里并将其连接到另一个图表。

00:03:48.360 --> 00:03:50.000
我尝试编译。

00:03:50.000 --> 00:03:52.400
你会看到我会得到一个错误

00:03:52.400 --> 00:03:55.160
多个具有相同名称的函数。

00:03:55.160 --> 00:03:59.080
我们不能在两个图表中看到同一事件。

00:03:59.080 --> 00:04:01.640
他们需要有一个不同的名字。

00:04:01.640 --> 00:04:04.000
实际上，我们不需要蓝图测试，

00:04:04.000 --> 00:04:06.320
但很高兴能展示一些东西。

00:04:06.320 --> 00:04:10.000
接下来我们需要看到的是功能类别。

00:04:10.000 --> 00:04:12.600
什么是函数？简而言之，

00:04:12.600 --> 00:04:15.880
它们是可重复使用的代码块，

00:04:15.880 --> 00:04:19.680
可重复使用的逻辑块，可以有返回输出，

00:04:19.680 --> 00:04:21.760
输入，可以调用

00:04:21.760 --> 00:04:24.240
在不同的地方多次

00:04:24.240 --> 00:04:26.400
与其他蓝图相互关联的蓝图。

00:04:26.400 --> 00:04:30.920
它们是执行特定的可重复使用任务的理想选择。

00:04:30.920 --> 00:04:32.880
他们有一些特定的规则。

00:04:32.880 --> 00:04:37.240
函数必须完成逻辑才能返回。

00:04:37.240 --> 00:04:41.400
他们必须完成这里发生的一切

00:04:41.400 --> 00:04:44.440
才有输出。

00:04:44.440 --> 00:04:46.760
例如，如果我点击此处获取输出，

00:04:46.760 --> 00:04:48.320
我想要获取这个值。

00:04:48.320 --> 00:04:50.680
无论这里发生什么，都必须

00:04:50.680 --> 00:04:53.720
完成或者停止运行。

00:04:53.720 --> 00:04:56.520
例如，如果我把这个函数带到这里，

00:04:56.520 --> 00:04:58.400
我在这里把它联系起来，

00:04:58.400 --> 00:05:01.400
这一切都必须结束

00:05:01.400 --> 00:05:04.720
代码的这些操作继续进行。

00:05:04.720 --> 00:05:07.280
下一个。下一个类别是

00:05:07.280 --> 00:05:10.480
本教程中我们不需要的宏。

00:05:10.480 --> 00:05:14.280
我们希望其他功能与它们相同，

00:05:14.280 --> 00:05:17.000
正如我所说，它的功能

00:05:17.000 --> 00:05:18.720
但用途更加广泛。

00:05:18.720 --> 00:05:23.080
我们可以有多个执行输入，

00:05:23.080 --> 00:05:26.920
这让我们进入了执行阶段。

00:05:26.920 --> 00:05:29.760
正如您之前看到的，我在这里连接了这根电缆。

00:05:29.760 --> 00:05:32.640
当我谈到演员轮换的时候，

00:05:32.640 --> 00:05:36.040
我说这里有一个执行输入，

00:05:36.040 --> 00:05:38.080
以及执行输出。

00:05:38.080 --> 00:05:43.560
这些执行需要连接起来才能运行我们的代码。

00:05:43.560 --> 00:05:47.120
由于它是空的，因此无法运行。

00:05:47.120 --> 00:05:50.480
正如你所见，像 beginPlay 这样的事件

00:05:50.480 --> 00:05:58.200
只有一个执行输出。

00:05:58.200 --> 00:06:01.800
也算是像做了某件事。

00:06:01.800 --> 00:06:04.400
在 beginPlay 中做一些事情，

00:06:04.400 --> 00:06:07.480
执行我们在此处看到的勾选操作，

00:06:07.480 --> 00:06:09.920
在演员开始重叠时做一些事情。

00:06:09.920 --> 00:06:12.400
我们还可以创建自定义事件

00:06:12.400 --> 00:06:15.200
我们自己在代码中调用它们。

00:06:15.200 --> 00:06:20.920
现在，我们需要根据设定的演员旋转来移动门。

00:06:20.920 --> 00:06:25.200
我们的门旋转了，我们走吧。

00:06:25.200 --> 00:06:28.000
详情请见负 90。

00:06:28.000 --> 00:06:34.480
从 89.999 数到负 90。

00:06:34.480 --> 00:06:37.560
假设当我们开始播放时，

00:06:37.560 --> 00:06:40.440
让我们删除该功能。

00:06:40.440 --> 00:06:45.640
假设我们想让门归零。

00:06:45.640 --> 00:06:49.240
现在，如果我按下“播放”，

00:06:49.240 --> 00:06:54.480
门不是零。

00:06:54.480 --> 00:07:01.000
当我按下“停止”时，我可以在错误消息日志中看到原因，

00:07:01.000 --> 00:07:05.320
即门的移动性未设置为可移动。

00:07:05.320 --> 00:07:08.080
我要点击门。

00:07:08.080 --> 00:07:10.320
以下是详细信息，

00:07:10.320 --> 00:07:14.760
我要去移动性并选择可移动的。

00:07:14.760 --> 00:07:19.560
现在，如果我按下“播放”，门就打开了。

00:07:19.560 --> 00:07:22.120
我想这就是这个的全部了。

00:07:22.120 --> 00:07:24.640
我要继续下一个了。再见。

00:07:24.640 --> 00:07:34.640
[音乐]

