WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.440
[音乐播放]

00:00:03.440 --> 00:00:16.680
您好，欢迎回到虚幻引擎 5，蓝图

00:00:16.680 --> 00:00:21.120
掌握、门系统和交互式门户。

00:00:21.120 --> 00:00:23.560
之前我们聊过一点

00:00:23.560 --> 00:00:26.160
关于相对旋转，我们已经

00:00:26.160 --> 00:00:31.440
完成时间线并设置相对旋转

00:00:31.440 --> 00:00:36.320
通过对浮点数进行插值，因为 x 和 y 不会

00:00:36.320 --> 00:00:37.280
改变。

00:00:37.280 --> 00:00:42.080
只有 z 轴（偏航轴）会从 0 到负 90 度进行插值

00:00:42.080 --> 00:00:44.320
设置相对旋转。

00:00:44.320 --> 00:00:48.320
并且它将永远处于这种旋转状态。

00:00:48.320 --> 00:00:52.960
所以我们有箭头来告诉我们前线在哪里

00:00:52.960 --> 00:00:56.840
以及门将朝哪里打开。

00:00:56.840 --> 00:00:59.800
如果我们想以这种方式打开它，

00:00:59.800 --> 00:01:02.640
我们唯一需要做的就是

00:01:02.640 --> 00:01:07.200
就是把这个减去 90 变成 90，

00:01:07.200 --> 00:01:11.880
它会打开至 90 度。

00:01:11.880 --> 00:01:15.980
接下来我们要做的就是启用播放器的输入

00:01:15.980 --> 00:01:19.320
控制器到此蓝图并禁用它

00:01:19.320 --> 00:01:22.880
当我们开始和结束重叠时，当我们的玩家开始

00:01:22.880 --> 00:01:27.360
并且结束重叠，使用组件标签 p。

00:01:27.360 --> 00:01:31.040
然后我们演示了一个输入节点，电子按钮，

00:01:31.040 --> 00:01:35.280
当我们在碰撞管中按下它时，

00:01:35.280 --> 00:01:39.960
它起作用了并且打开了我们的门。

00:01:39.960 --> 00:01:42.960
让我们继续制作门

00:01:42.960 --> 00:01:45.440
能够打开和关闭。

00:01:45.440 --> 00:01:50.360
在之前的几节课中，我们讲了一些关于枚举的内容，

00:01:50.360 --> 00:01:54.520
有无法更改的预设列表

00:01:54.520 --> 00:01:56.880
在运行时。

00:01:56.880 --> 00:01:59.760
让我们来制作一个吧，因为我们展示的那个

00:01:59.760 --> 00:02:04.320
已经存在于虚幻引擎中，

00:02:04.320 --> 00:02:06.880
这和方向有关。

00:02:06.880 --> 00:02:10.880
我们可以使用这个，但让我们让它更

00:02:10.880 --> 00:02:14.760
还可用于其他一些用途。

00:02:14.760 --> 00:02:18.920
我们将单击鼠标右键，然后转到蓝图。

00:02:18.920 --> 00:02:23.440
从蓝图中，我们将选择枚举。

00:02:23.440 --> 00:02:29.600
现在我们将其称为 E 门州，

00:02:29.600 --> 00:02:31.960
我要去打开它。

00:02:31.960 --> 00:02:35.040
在这里，我们有一个添加枚举器的按钮。

00:02:35.040 --> 00:02:37.120
正如我们所说，它基本上是一个清单。

00:02:37.120 --> 00:02:39.800
你可能会注意到，它们的名字不同，

00:02:39.800 --> 00:02:43.720
因为它不能有两次相同的枚举器。

00:02:43.720 --> 00:02:46.720
比如，如果我将其变为 0，它就会弹出一个错误。

00:02:46.720 --> 00:02:51.040
枚举器 0，新的枚举器 0，已被使用。

00:02:51.040 --> 00:03:05.560
让我们开盘、收盘、开市，实际上是 1p，然后收盘。

00:03:05.560 --> 00:03:16.280
现在我要保存并关闭它。

00:03:16.280 --> 00:03:20.440
现在我有了这个列表，但是我如何引入蓝图呢？

00:03:20.440 --> 00:03:21.600
我不能只是拖放它。

00:03:21.600 --> 00:03:25.560
它无法从此类资产创建节点。

00:03:25.560 --> 00:03:29.280
为此，我要进入“变量”选项卡，

00:03:29.280 --> 00:03:31.200
我要按这里的加号按钮

00:03:31.200 --> 00:03:36.480
创建一个新变量，然后转到此处的“变量类型”，

00:03:36.480 --> 00:03:42.400
并搜索 E Door State。

00:03:42.400 --> 00:03:48.800
我希望我正在打字，并且它是在类别枚举中，

00:03:48.800 --> 00:03:53.320
枚举，这是我们的枚举 E 门状态。

00:03:53.320 --> 00:03:55.000
我要点击这个，然后

00:03:55.000 --> 00:04:00.360
将该变量也命名为 Door State。

00:04:00.360 --> 00:04:04.560
我点击这里的方式是，

00:04:04.560 --> 00:04:10.640
或者您可以随时按 F2，它将转到重命名。

00:04:10.640 --> 00:04:15.760
让我们把它带到这里，探索一个新的节点。

00:04:15.760 --> 00:04:18.320
此节点为Switch节点。

00:04:18.320 --> 00:04:20.440
正如我们之前所说，Switch 节点

00:04:20.440 --> 00:04:23.720
需要连接到特定的枚举，

00:04:23.720 --> 00:04:26.120
开启枚举，基本上，

00:04:26.120 --> 00:04:29.960
因为有基于整数的开关，例如，

00:04:29.960 --> 00:04:32.440
基于很多事物。

00:04:32.440 --> 00:04:37.280
如果我们输入 Switch on，你就可以看到所有以 E 开头的内容

00:04:37.280 --> 00:04:41.360
是一个枚举，很多尼亚加拉的东西，

00:04:41.360 --> 00:04:46.120
但还有许多变量需要改变。

00:04:46.120 --> 00:04:49.720
最有用的实际上是 Switch on 字符串，

00:04:49.720 --> 00:04:53.880
这样我们就可以定制我们的案例。

00:04:53.880 --> 00:04:59.160
这种情况可能是开放的，就像我们可以使用字符串一样，

00:04:59.160 --> 00:05:02.720
我们可以半开，然后

00:05:02.720 --> 00:05:06.240
取决于从字符串传入的内容。

00:05:06.240 --> 00:05:11.000
同样，字符串是一种变量类型，它可以采用

00:05:11.000 --> 00:05:13.600
基本上是文本，任何文本。

00:05:13.600 --> 00:05:15.320
可以是数字，可以是字母，

00:05:15.320 --> 00:05:21.160
它可以是一个符号，也可以是任何文本。

00:05:21.160 --> 00:05:23.920
还有一个文本变量，但它

00:05:23.920 --> 00:05:27.120
专为不同类型的用途而设计，

00:05:27.120 --> 00:05:31.320
更多地用于本地化内容。

00:05:31.320 --> 00:05:35.680
它针对显示不同类型的文本进行了优化

00:05:35.680 --> 00:05:37.880
如果他们需要翻译和格式化

00:05:37.880 --> 00:05:39.520
针对不同的语言。

00:05:39.520 --> 00:05:42.520
但对于我们来说，这只是一个例子，

00:05:42.520 --> 00:05:45.400
因为我们将使用枚举。

00:05:45.400 --> 00:05:49.320
所以当我按下 E 键时，我想要这个

00:05:49.320 --> 00:05:55.880
根据门的状态做一些不同的事情。

00:05:55.880 --> 00:06:01.880
现在，我们需要为这个状态设置一个默认值。

00:06:01.880 --> 00:06:04.400
枚举中的第一个值

00:06:04.400 --> 00:06:07.680
是开放的，这是我们不想要的。

00:06:07.680 --> 00:06:10.120
我们希望将其关闭。

00:06:10.120 --> 00:06:12.760
所以我要将其设置为关闭并再次编译。

00:06:12.760 --> 00:06:17.040
因此按下 E 时的默认状态是关闭。

00:06:17.040 --> 00:06:20.400
所以当门关上时，我们将从头开始玩。

00:06:20.400 --> 00:06:24.000
当门打开的时候，我们要从末端反向走。

00:06:24.000 --> 00:06:27.040
在玩游戏的时候，我们实际上可以

00:06:27.040 --> 00:06:30.520
改变这里的状态并说

00:06:30.520 --> 00:06:40.520
我们可以把它连接到这里，然后连接到这里。

00:06:40.520 --> 00:06:45.000
然后我要复制这个并把它连接到这里

00:06:45.000 --> 00:06:47.080
还有这里。

00:06:47.080 --> 00:06:52.560
这将是结束，这将是开始。

00:06:52.560 --> 00:06:57.760
所以当我们按下 E 键时，如果我们处于打开状态，

00:06:57.760 --> 00:06:59.320
我们正在关门。

00:06:59.320 --> 00:07:01.560
我们正在反转动画。

00:07:01.560 --> 00:07:05.560
如果我们接近目标，我们就会打开大门

00:07:05.560 --> 00:07:07.920
并正确播放动画。

00:07:07.920 --> 00:07:13.880
但我想演示执行一次节点。

00:07:13.880 --> 00:07:20.800
正如我们所说，时间线上的更新会不断运行。

00:07:20.800 --> 00:07:24.480
这意味着基本上每一帧都会运行。

00:07:24.480 --> 00:07:29.120
每一帧，它都会运行这次执行产生的任何内容。

00:07:29.120 --> 00:07:36.040
如果我在这里做一次，

00:07:36.040 --> 00:07:38.920
表示它将执行此操作。

00:07:38.920 --> 00:07:43.880
一旦到达这一点，它就会停下来。

00:07:43.880 --> 00:07:47.600
当它已经完成一次之后。

00:07:47.600 --> 00:07:53.560
要再次执行此操作，我们需要重新设置。

00:07:53.560 --> 00:07:57.200
如果我必须点击这里的“开始关闭”按钮，

00:07:57.200 --> 00:08:00.120
这意味着它需要重置

00:08:00.120 --> 00:08:06.200
在它完成一次之前，我们在这里所做的一切都已经完成了。

00:08:06.200 --> 00:08:12.160
这意味着，如果我们想改变——

00:08:12.160 --> 00:08:13.760
让我切一下。

00:08:13.760 --> 00:08:18.840
打开后从末端开始反转。

00:08:18.840 --> 00:08:22.240
并从头开始播放。

00:08:22.240 --> 00:08:25.000
所以它正在打开，也正在关闭。

00:08:25.000 --> 00:08:27.680
是的，现在我要将其粘贴在这里。

00:08:27.680 --> 00:08:32.040
如果我想在时间轴运行时改变这一点，

00:08:32.040 --> 00:08:35.200
我需要做一次。

00:08:35.200 --> 00:08:39.120
当时间线结束后我需要重置它。

00:08:39.120 --> 00:08:43.320
所以我要在这里放置一个重新路由节点。

00:08:43.320 --> 00:08:47.440
我还要在这里放置一个重新路由节点。

00:08:47.440 --> 00:08:51.400
我要在这里把它连接起来。

00:08:51.400 --> 00:08:56.920
现在，我可以使用这个枚举代替这个

00:08:56.920 --> 00:09:01.600
仅确定门在哪里关闭或打开。

00:09:01.600 --> 00:09:12.120
因此我要打开 E 时间线。

00:09:12.120 --> 00:09:16.160
如果是向前，就意味着我们正在打开门。

00:09:16.160 --> 00:09:19.120
如果是倒着的，就意味着我们正在关门。

00:09:21.080 --> 00:09:23.200
这将运行一次。

00:09:23.200 --> 00:09:26.680
当时间线结束时，它将重置。

00:09:26.680 --> 00:09:30.720
所以下次再做的话就是免费的。

00:09:30.720 --> 00:09:32.240
我们去测试一下吧。

00:09:32.240 --> 00:09:33.080
我们去玩吧。

00:09:33.080 --> 00:09:37.040
我们正在走近门口。

00:09:37.040 --> 00:09:38.560
我们要搬到这儿来。

00:09:38.560 --> 00:09:41.000
按 E 打开。

00:09:41.000 --> 00:09:43.600
按 E 关闭。

00:09:43.600 --> 00:09:47.160
什么也没有发生。

00:09:47.160 --> 00:09:52.680
原因很简单，因为最终，

00:09:52.680 --> 00:09:56.560
我们没有具体说明我们是开幕式还是闭幕式。

00:09:56.560 --> 00:10:05.080
所以我要做的是做一个序列节点。

00:10:05.080 --> 00:10:07.200
那么，什么是序列节点？

00:10:07.200 --> 00:10:12.080
听起来它要按顺序做一些事情，

00:10:12.080 --> 00:10:13.360
它会的。

00:10:13.360 --> 00:10:19.160
但这并不意味着它会等待一行完成

00:10:19.160 --> 00:10:21.120
然后移至下一个。

00:10:21.120 --> 00:10:26.920
它将按顺序运行所有引脚，

00:10:26.920 --> 00:10:30.720
但它们几乎会同时开火。

00:10:30.720 --> 00:10:38.880
比如说，如果我这里有一个打印字符串说“你好”，

00:10:38.880 --> 00:10:42.920
我这里也有一个打印字符串，

00:10:42.920 --> 00:10:49.240
也就是说—实际上，让我们对其进行编号。

00:10:49.240 --> 00:10:52.680
一、二。

00:10:52.680 --> 00:10:55.240
让我们将其移高一点。

00:10:55.240 --> 00:10:57.040
我要在这里延迟一下。

00:10:57.040 --> 00:11:03.080
我要在这里放另一根绳子。

00:11:03.080 --> 00:11:07.560
假设是三。

00:11:07.560 --> 00:11:12.280
这就是四个。

00:11:12.280 --> 00:11:19.000
所以我们应该在这里看到一、二、三，

00:11:19.000 --> 00:11:19.880
四。

00:11:19.880 --> 00:11:24.840
但实际上，我们会看到一、二、四、三，

00:11:24.840 --> 00:11:28.520
因为三者在这里有一点延迟。

00:11:28.520 --> 00:11:31.240
让我们就此止步一秒钟。

00:11:31.240 --> 00:11:34.920
实际上，0.2 已经很好了。

00:11:34.920 --> 00:11:37.640
我没有确切的数字，但想象一下

00:11:37.640 --> 00:11:45.040
如果一帧渲染需要 16 毫秒

00:11:45.040 --> 00:11:47.400
并完成整个游戏的计算，

00:11:47.400 --> 00:11:51.440
想象一下每个节点的运行速度有多快。

00:11:51.440 --> 00:11:54.320
所以 0.2 已经足够了。

00:11:54.320 --> 00:11:55.280
我们去测试一下吧。

00:11:55.280 --> 00:11:58.200
我们去按下播放键吧。

00:11:58.200 --> 00:12:02.760
而且我需要去门口测试一下。

00:12:02.760 --> 00:12:03.440
你看？

00:12:03.440 --> 00:12:06.200
一、二、四、三。

00:12:06.200 --> 00:12:08.640
可以在日志中再次看到它。

00:12:08.640 --> 00:12:11.480
一、二、四、三。

00:12:11.480 --> 00:12:14.280
所以这告诉我们这并不

00:12:14.280 --> 00:12:18.480
等待一个执行完成后再运行下一个。

00:12:18.480 --> 00:12:21.840
然后是一、二、三。

00:12:21.840 --> 00:12:27.400
我要删除所有这些，因为它们不是真正需要的。

00:12:27.400 --> 00:12:30.760
我要移除一些执行销。

00:12:30.760 --> 00:12:33.200
我们只需要两个。

00:12:33.200 --> 00:12:36.720
我们将这个连接到重置。

00:12:36.720 --> 00:12:42.160
让我们在这里复制这个功能。

00:12:42.160 --> 00:12:46.200
我们还将方向连接到开关。

00:12:46.200 --> 00:12:49.760
未来的变革将是开放的。

00:12:49.760 --> 00:12:54.760
而向后看，它将会很接近。

00:12:54.760 --> 00:13:03.400
现在我们应该能够看到门打开和关闭了。

00:13:03.400 --> 00:13:05.400
是的。

00:13:05.400 --> 00:13:06.720
但还是缺少了一些东西。

00:13:06.720 --> 00:13:09.280
玩家应该被告知他们

00:13:09.280 --> 00:13:12.280
可以打开和关闭门。

00:13:12.280 --> 00:13:15.440
说实话，我们离门口很近了

00:13:15.440 --> 00:13:20.280
开始打开的时候，好像碰撞很小。

00:13:20.280 --> 00:13:23.720
所以当我在这里时，就会发生这种事。

00:13:23.720 --> 00:13:30.160
所以我认为这两件事将在下一课中讨论。

00:13:30.160 --> 00:13:31.800
然后我就去看你。

00:13:31.800 --> 00:13:33.360
再见。

00:13:33.360 --> 00:13:36.720
[音乐播放]

00:13:36.720 --> 00:13:40.080
[音乐播放]

